로그인 메모

## 필기
1. 로그인 구현 세팅: Flask, pymongo, pyjwt & template languages : jinja2
+ 세션/쿠키 방식으로 하고싶을시 session
2. 벌마 임포트 링크
	<!-- Bulma CSS 링크 -->
        	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.1/css/bulma.min.css">

3. 플라스크 서버에서 로그인 기능 구현하기
	- 해쉬함수 : 패스워드 저장알고리즘
	- jwt 토큰
	- 쿠키 : 브라우저에 있는 키정보

4. 한페이지 안에서 다른페이지로 넘어가지않고서도 페이지를 바꿔주기
5. 매번 app.py에서 db세팅
client = MongoClient('내AWS아이피', 27017, username="아이디", password="비밀번호")
db = client.dbsparta_plus_week4

6. 로그인서비스 처리
모든 요소들을 넣은 다음에 로그인/회원가입에 나눠서 숨겼다가 내놨다가하는방식
	- toggleClass : 가지고있으면 없애고 있으면 생성해라
이랬던 코드가
function toggle_sign_up() {
    if ($("#sign-up-box").hasClass("is-hidden")) {
        $("#sign-up-box").removeClass("is-hidden")
    } else {
        $("#sign-up-box").addClass("is-hidden")
    }
}
이렇게 변하는 느낌
function toggle_sign_up() {
    if ($("#sign-up-box").hasClass("is-hidden")) {
        $("#sign-up-box").removeClass("is-hidden")
    } else {
        $("#sign-up-box").addClass("is-hidden")
    }
}
	- 아이디: 사실 이 조건은 크게 안변함, 만들지말고 가져다쓸것
function is_nickname(asValue) {
    var regExp = /^(?=.*[a-zA-Z])[-a-zA-Z0-9_.]{2,10}$/;
    return regExp.test(asValue);
}

function is_password(asValue) {
    var regExp = /^(?=.*\d)(?=.*[a-zA-Z])[0-9a-zA-Z!@#$%^&*]{8,20}$/;
    return regExp.test(asValue);
}

7. 아이디가 중복인지 아닌지 확인하는 api call
$.ajax({
                    type: "POST",
                    url: "/sign_up/check_dup",
                    data: {
                        username_give: username
                    },
                    success: function (response) {

                        if (response["exists"]) {
                            $("#help-id").text("이미 존재하는 아이디입니다.").removeClass("is-safe").addClass("is-danger")
                            $("#input-username").focus()
                        } else {
                            $("#help-id").text("사용할 수 있는 아이디입니다.").removeClass("is-danger").addClass("is-success")
                        }
                        $("#help-id").removeClass("is-loading")

                    }
                });
8. post - 서버의 값이나 상태를 바꾸기위해사용,수행하는것/ get - 데이터를 우리쪽에서 조회하는것,가져오는것

단적으로 말하자면 
app.py - 서버페이지 - post:클라이언트에서 받은 정보를 db에 넣어줄때 & get:서버쪽에서 클라이언트쪽에서 온 정
index~모든 html - 클라이언트 페이지 - post:서버에게 정보를 건네줄때 & get: 서버에서 온 정보를 회신할때

9. 클라이언트는 아이디와 패스워드를 받음 > 서버한테 검증요청 > 서버는 DB로 찾아보고 매칭되면 jwt 토큰을 만들어서 클라이언트한테 패스
> 클라이언트는 이걸 받으면 쿠키에 저장해놨다가 이게 유효할때까지 계속 씀(서버에서 이걸 설정)

10. 파이썬에서 decode하면 에러뜨는이유
python3가 기본적으로 utf-8이어서 decode하지 않아도 된다고 합니다! 아래 부분을 제거해주시면 될 것 같아요~

11. flask로 쿠키/세션 기능 구현
세션안에서 딕셔너리를 넣는것이 로그인, 빼는것이 로그아웃인셈

####################
## 추가해야될것

1. 프로필 수정창(없어도되나)
2. 깃 git status > git pull > git add . > git commit -m [메세지]> git push
3. 팝업창의 경우 불마에서 모달이라는걸 사용함
모달: 평소에는 안보였다가 어떤 입력이나 동작을 했을대만 보이는 창
벌마에서는 is-active 클래스가 있으면 등장, 없으면 모달 등장x